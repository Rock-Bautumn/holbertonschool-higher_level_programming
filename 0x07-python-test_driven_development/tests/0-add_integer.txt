====================================
= -------------------------------- =
= - doctest for 0-add_integer.py - =
= -------------------------------- =
====================================

``add_integer`` returns the sum of two arguments

=========================================
= ------------------------------------- =
= - WHAT IT TAKES TO BE A TEST PASSER - =
= ------------------------------------- =
=========================================

/-------------------\
| Prepare the test! |
\-------------------/

>>> add_integer = __import__('0-add_integer').add_integer

/------------------\
| Begin the tests! |
\------------------/

-------------
WORKING CASES
-------------

>>> add_integer(42)
140
>>> add_integer(0)
98
>>> add_integer(-1)
97
>>> add_integer(1)
99
>>> add_integer(99999999999999)
100000000000097
>>> add_integer(-99999999999999999)
-99999999999999901
>>> add_integer(4.5)
102
>>> add_integer(-5.5)
93
>>> add_integer(-1, 0)
-1
>>> add_integer(-1, -1)
-2
>>> add_integer(1, 0)
1
>>> add_integer(0, 1)
1
>>> add_integer(0, 0)
0
>>> add_integer(0.0, 0.0)
0
>>> add_integer(415, 510)
925
>>> add_integer(5, -6)
-1
>>> add_integer(-7, 8)
1
>>> add_integer(-9, -10)
-19
>>> add_integer(17, .9999999999999999)
17
>>> add_integer(.99999999999999999, -.99999999999999999)
0
>>> add_integer(.99999999999999999, .99999999999999999)
2
>>> add_integer(-.99999999999999999, -.99999999999999999)
-2

--------------
BREAKING CASES
--------------


>>> add_integer(None)
Traceback (most recent call last):
  ...
TypeError: a must be an integer

>>> add_integer("windsurf")
Traceback (most recent call last):
  ...
TypeError: a must be an integer

>>> add_integer("bonaire", 55)
Traceback (most recent call last):
  ...
TypeError: a must be an integer

>>> add_integer(64, "bonaire")
Traceback (most recent call last):
  ...
TypeError: b must be an integer

>>> add_integer("64", 36)
Traceback (most recent call last):
  ...
TypeError: a must be an integer

>>> add_integer(None, None)
Traceback (most recent call last):
  ...
TypeError: a must be an integer

>>> add_integer(float('nan'), 7)
Traceback (most recent call last):
ValueError: cannot convert float NaN to integer

>>> add_integer(float('inf'), 8)
Traceback (most recent call last):
OverflowError: cannot convert float infinity to integer
